# -*- coding: utf-8 -*-
"""image processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qVoKNpotiEL-l-2y7-EJ8Pz_y1mTMa9m
"""

import pandas as pd
import numpy as np
from glob import glob
import cv2
import matplotlib.pylab as plt

cat_file=glob('/content/cat.jpg')
dog_file=glob('/content/dog.jpg')

img_mp1=plt.imread(cat_file[0])
img_cv2=cv2.imread(cat_file[0])
img_mp1.shape,img_cv2.shape

type(img_mp1)

pd.Series(img_mp1.flatten()).plot(kind='hist',bins=50,title='Distribution of pixel values')
plt.show()

"""Displaying images

"""

fig,ax=plt.subplots(figsize=(10,10))
ax.imshow(img_mp1)
ax.axis('off')
plt.show()

fig,axs=plt.subplots(1,3,figsize=(15,5))
axs[0].imshow(img_mp1[:,:,0],cmap='Reds')
axs[1].imshow(img_mp1[:,:,0],cmap='Greens')
axs[2].imshow(img_mp1[:,:,0],cmap='Blues')
axs[0].axis('off')
axs[1].axis('off')
axs[2].axis('off')
plt.show()

"""cv2 reads in channels as BGR,
matplotlib reads in channels as RGB
"""

fig, axs = plt.subplots(1, 2, figsize=(10, 5))
axs[0].imshow(img_cv2)
#axs[1].imshow(img_mpl) # The variable img_mpl is not defined. Using img_cv2 instead.
axs[1].imshow(img_cv2) # If you intended to display the same image using Matplotlib, use img_cv2. If a different image should be displayed, define and use the appropriate variable.
axs[0].axis('off')
axs[1].axis('off')
axs[0].set_title('CV2 Image')
axs[1].set_title('Matplotlib Image')
plt.show()

"""Image manipulation"""

img = plt.imread(dog_file[0])
fig, ax = plt.subplots(figsize=(8, 8))
ax.imshow(img)
ax.axis('off')
plt.show()

img.shape

img_gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
fig, ax = plt.subplots(figsize=(8, 8))
ax.imshow(img_gray, cmap='Greys')
ax.axis('off')
ax.set_title('Grey Image')
plt.show()

"""Resizing and scaling"""

img_resized = cv2.resize(img, None, fx=0.25, fy=0.25)
fig, ax = plt.subplots(figsize=(8, 8))
ax.imshow(img_resized)
ax.axis('off')
plt.show()

img_resize = cv2.resize(img, (500, 400))
fig, ax = plt.subplots(figsize=(8, 8))
ax.imshow(img_resize)
ax.axis('off')
plt.show()

img_resize = cv2.resize(img, (5000, 5000), interpolation = cv2.INTER_CUBIC)
fig, ax = plt.subplots(figsize=(8, 8))
ax.imshow(img_resize)
ax.axis('off')
plt.show()

img.shape

img_resize.shape

"""cv2 kernels"""

# Sharpen Image
kernel_sharpening = np.array([[-1,-1,-1],
                              [-1,9,-1],
                              [-1,-1,-1]])

sharpened = cv2.filter2D(img, -1, kernel_sharpening)

fig, ax = plt.subplots(figsize=(8, 8))
ax.imshow(sharpened)
ax.axis('off')
ax.set_title('Sharpened Image')
plt.show()

# Blurring the image
kernel_3x3 = np.ones((3, 3), np.float32) / 9
blurred = cv2.filter2D(img, -1, kernel_3x3)
fig, ax = plt.subplots(figsize=(8, 8))
ax.imshow(blurred)
ax.axis('off')
ax.set_title('Blurred Image')
plt.show()

"""Saving"""

plt.imsave('mpl_dog.png', blurred)
cv2.imwrite('cv2_dog.png', blurred)